{"version":3,"sources":["shared/components/UIElements/LoadingSpinner.js","context/auth-context.js","shared/hooks/AuthHook.js","App.js","index.js"],"names":["LoadingSpinner","props","className","asOverlay","AuthContext","createContext","isLoggedIn","token","userId","login","logout","logoutTimer","Users","React","lazy","NewPlace","MainNavigation","UserPlaces","UpdatePlace","Authenticate","App","routes","useState","setToken","setUserId","tokenExpirationDate","setTokenExpirationDate","useCallback","uid","expirationData","tokenExpDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","storedData","parse","getItem","remaingTime","setTimeout","clearTimeout","useAuth","path","exact","to","Provider","value","fallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.959b8182.chunk.js","sourcesContent":["import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import { createContext } from \"react\";\r\nexport const AuthContext = createContext({\r\n  isLoggedIn: false,\r\n  token: null,\r\n  userId: null,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n","import { useState, useCallback, useEffect } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState();\r\n  const [userId, setUserId] = useState();\r\n  const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n\r\n  const login = useCallback((uid, token, expirationData) => {\r\n    setUserId(uid);\r\n    setToken(token);\r\n    const tokenExpDate =\r\n      expirationData || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n    setTokenExpirationDate(tokenExpDate);\r\n    localStorage.setItem(\r\n      \"userData\",\r\n      JSON.stringify({\r\n        userId: uid,\r\n        token: token,\r\n        expiration: tokenExpDate.toISOString(),\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    setUserId(null);\r\n    setToken(null);\r\n    setTokenExpirationDate(null);\r\n    localStorage.removeItem(\"userData\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (\r\n      storedData &&\r\n      storedData.token &&\r\n      new Date(storedData.expiration) > new Date()\r\n    ) {\r\n      login(\r\n        storedData.userId,\r\n        storedData.token,\r\n        new Date(storedData.expiration)\r\n      );\r\n    }\r\n  }, [login]);\r\n\r\n  useEffect(() => {\r\n    if (token && tokenExpirationDate) {\r\n      const remaingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n      logoutTimer = setTimeout(logout, remaingTime);\r\n    } else {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  }, [token, logout, tokenExpirationDate]);\r\n\r\n  return { token, login, logout, userId };\r\n};\r\n","import React, { Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n// import Users from \"./user/pages/Users\";\n// import NewPlace from \"./places/pages/NewPlace\";\n// import MainNavigation from \"./shared/components/Navigation/MainNavigation\";\n// import UserPlaces from \"./places/pages/UserPlaces\";\n// import UpdatePlace from \"./places/pages/UpdatePlace\";\n// import Authenticate from \"./user/pages/Authenticate\";\nimport LoadingSpinner from \"./shared/components/UIElements/LoadingSpinner\";\nimport { AuthContext } from \"./context/auth-context\";\nimport { useAuth } from \"./shared/hooks/AuthHook\";\n\nconst Users = React.lazy(() => import(\"./user/pages/Users\"));\nconst NewPlace = React.lazy(() => import(\"./places/pages/NewPlace\"));\nconst MainNavigation = React.lazy(() =>\n  import(\"./shared/components/Navigation/MainNavigation\")\n);\nconst UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces\"));\nconst UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace\"));\nconst Authenticate = React.lazy(() => import(\"./user/pages/Authenticate\"));\n\nfunction App() {\n  const { token, login, logout, userId } = useAuth();\n  let routes;\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/place/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\" exact>\n          <Authenticate />\n        </Route>\n        <Route path=\"/place/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout,\n      }}\n    >\n      <Router>\n        {\" \"}\n        <Suspense\n          fallback={\n            <div className=\"center\">\n              <LoadingSpinner />\n            </div>\n          }\n        >\n          <MainNavigation />\n          <main>{routes}</main>\n        </Suspense>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}